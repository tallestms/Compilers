\documentclass[a4paper,12pt]{report}
\usepackage[latin1]{inputenc} 
\usepackage{amssymb}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{anysize}
\usepackage{booktabs}
\usepackage{hyperref}

\begin {document}
	
        \title {Compiladores\\Trabalho 1 - Analisador L\'exico}
        \author {Jackson Willian Brito; Talles Tatagiba Martins de Souza}
	\date {Novembro, 2013}
        \maketitle
 
\pagebreak

\tableofcontents % indice de contenidos

\pagebreak

\renewcommand{\thesection}{\arabic{section}} 
\marginsize{3cm}{3cm}{3cm}{3cm} %{izquierda}{derecha}{arriba}{abajo}


\section {Introdu\c{c}\~ao}

Da literatura, temos a defini\c{c}\~ao de um compilador como sendo um programa que recebe um programa escrito em uma linguagem
fonte e o transforma em um programa em uma linguagem destino. Os programas fonte e alvo t\^em o mesmo significado. Uma caracter\'istica
imprescind\'ivel de um compilador \'e a capacidade de detectar e reportar erros.

O processo de compila\c{c}\~ao pode ser subdividido nas etapas de an\'alise e s\'intese. A etapa de an\'alise pode ser subdividida em 
3 fases, s\~ao elas: l\'exica, sint\'atica e sem\^antica. Neste trabalho abordamos a fase l\'exica da etapa de an\'alise.

\section{A linguagem - G-Portugol}

Para a elabora\c{c}\~ao do trabalho de compiladores foi escolhida como linguagem dos programas fontes do nosso compilador a
linguagem G-Portugol que \'e uma linguagem voltada ao ensino inicial de programa\c{c}\~ao e por isso n\~ao possui bem definida e
formatada todas as suas estruturas. Assim, para completar o processo de compila\c{c}\~ao vamos inserir algumas caracter\'isticas
pr\'oprias de outras linguagens de programa\c{c}\~ao conceituadas tendo, ao final dos 4 trabalhos que ser\~ao realizados
no decorrer do semestre, constru\'ido um compilador capaz de reconhecer programas escritos em uma varia\c{c}\~ao da linguagem
G-Portugol e gerar um execut\'avel ou reportando erros quando houver.


\section {Analisador L\'exico}

A an\'alise l\'exica consiste na identifica\c{c}\~ao de $tokens$ da linguagem fonte dentro do arquivo de entrada. 
Nesta fase a gram\'atica da linguagem \'e verificada. Um analisador l\'exico \'e capaz de reconhecer uma gram\'atica 
atrav\'es de um aut\^omato finito.

Faz-se necess\'ario frizar que n\~ao houve o desenvolvimento de um analisador l\'exico, apenas a forma\c{c}\~ao das regras 
atrav\'es das quais a ferramenta computacional $flex$ construiu o analisador.

\subsection{Flex}
$Flex$ \'e uma ferramenta computacional que, a partir da especifica\c{c}\~ao de regras gramaticais por meio de express\~oes
regulares, gera um programa em $c$ capaz de reconhecer palavras que obedecem as regras estabelecidas ($tokens$).

\section{Palavras reservadas}

As palavras reservadas da nossa linguagem s\~ao basicamente as palavras reservadas que aparecem no manual de G-Portugol 
acrescidas das palavras \textit{seleciona, fim-seleciona, caso, parar} e \textit{padr\~ao}, adicionadas para construir a estrutura \textit{switch-case} que n\~ao \'e 
contemplada pelo manual.

Abaixo seguem listadas todas as palavras reservadas da linguagem em ordem alfab\'etica.
\begin{itemize}
\item algoritmo
\item at\'e
\item caractere
\item caracteres
\item caso
\item de
\item e
\item enquanto
\item ent\~ao
\item fa\c{c}a
\item falso
\item fim
\item fim-enquanto
\item fim-para
\item fim-se
\item fim-seleciona
\item fim-vari\'aveis
\item fun\c{c}\~ao
\item in\'icio
\item inteiro
\item inteiros
\item literais
\item literal
\item l\'ogico
\item l\'ogicos
\item matriz
\item n\~ao
\item ou
\item para
\item parar
\item passo
\item reais
\item real
\item retorne
\item se
\item seleciona
\item sen\~ao
\item vari\'aveis
\item verdadeiro
\end{itemize}

\section{Escolhas de representa\c{c}\~ao}

Na gera\c{c}\~ao do analisador l\'exico \'e necess\'aria  a tomada de decis\~oes sobre a forma de reconhecer algumas
peculiaridades.

\subsection{N\'umeros}
Para o reconhecimento de n\'umeros com sinais por exemplo, pode-se optar por reconhec\^e-los com sinais na fase de an\'alise
l\'exica e inferir a opera\c{c}\~ao na an\'alise sem\^antica; ou reconhecer n\'umeros e operadores separadamente e posteriormente, 
na fase de an\'alise sem\^antica, identificar a sequ\^encia $operador-numero$ como sendo, em realidade um n\'umero com sinal.
Alguns números válidos na linguagem são:
\begin{itemize}
 \item 10
 \item +10
 \item -10
 \end{itemize}


\subsection{Real}
Outra escolha importante \'e a forma como ser\~ao representados os n\'umeros reais. No manual de portugol ele reconhece apenas
d\'igitos seguidos de ponto seguido por d\'igitos.
Nossa varia\c{c}\~ao da linguagem, al\'em de tornar opcional a presen\c{c}a do sinal a frente, como descrito anteriormente
torna opcional ainda o acr\'escimo da letra $e$ ou $E$ seguida por um sinal opcionalmente e por dígitos obrigatoriamente, sendo
poss\'ivel assim representar pot\^encias.

S\~ao portanto exemplos de n\'umeros reais reconhecidos por nosso analisador:
\begin{itemize}
 \item 10.0
 \item +10.0
 \item -10.0
 \item 10.10E10
 \item +10.10E+10
 \item -10.10
 \item -10.10e+1
 \item 10.11e-2
\end{itemize}

\subsection{Coment\'arios}

\subsubsection{Linha}
A defini\c{c}\~ao de coment\'arios de linha s\~ao quaisquer sequ\^encias de caracteres 
escritos depois de ``//'' que n\~ao seja o avan\c{c}o de linha ($\backslash$n).
\subsubsection{Bloco}
A defini\c{c}\~ao de coment\'rios por blocos se inicia por (/*) e termina necessariamente por (*/), 
sendo que quaisquer sequ\^encias de caracteres entre os s\'imbolos aqui definidos s\~ao 
ignorados pelo compilador.
Alguns exemplos de coment\'arios que funcionariam na linguagem s\~ao:
\begin{itemize}
 \item /**/
 \item /** **/
 \item /* /* /*  */ 
 \item /* isso \'e um exemplo. */
 \end{itemize}
Alguns exemplos que n\~ao funcionariam nesta linguagem devido \`a pr\'opria defini\c{c}\~ao de coment\'arios da linguagem:
\begin{description}
 \item /* */ */ \hfill Ele identificaria os \'ultimos dois caracteres como outra coisa operadores.
 \item /*/ \hfill Pela defini\c{c}\~ao o coment\'ario necessita de ``*'' pr\'oprios para abertura e fechamento.
\end{description}

%\begin{figure}
 % \centering
 %   \includegraphics[width=0.9\textwidth]{parte1_gaussianKernel2}
 % \caption{SVM con kernel gausiano}
 % \label{fig:kerGaus2}
%\end{figure}

\section{Casos de teste}
Os seguintes testes foram criados para testar adequadamente todos os casos a serem analisados na an\'alise l\'exica do compilador.

\subsection{in1.gpt}
Neste exemplo testamos a declara\c{c}\~ao de vari\'aveis para correta identifica\c{c}\~ao do tipo, no caso real ou inteiro.

\subsection{in2.gpt}
Neste exemplo estamos testando a combina\c{c}\~ao condicional com as palavras reservadas: SE, ENT\~AO, SEN\~AO e FIM-SE.

\subsection{in3.gpt}
Neste exemplo estamos testando os casos de repeti\c{c}\~ao FOR, WHILE e DO-WHILE para a linguagem G-Portugol.

\subsection{in4.gpt}
Neste exemplo estamos testando o SWITCH-CASE para a linguagem G-Portugol assim como as peculiridades da linguagem para o uso de 
coment\'arios, seguindo exatamente o que \'e proposto pelo pr\'oprio manual da linguagem.

\subsection{in5.gpt} 
Neste exemplo estamos declarando fun\c{c}\~oes e fazendo testes com diferentes vari\'aveis com elas.

\section{Conclus\~ao}

Ao fim deste trabalho solidificou-se o conhecimento em rela\c{c}\~ao a fase de an\'alise l\'exica do processo de compila\c{c}\~ao
atrav\'es da formata\c{c}\~ao das regras da gram\'atica da linguagem a ser reconhecida. Sedimentando assim os conhecimentos abordados
na teoria da aula de Compiladores e habilitando-nos para o passo seguinte na elabora\c{c}\~ao de um compilador.

\end{document}